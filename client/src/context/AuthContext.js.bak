import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {

    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        // Check if user data exists in localStorage
        const storedUser = localStorage.getItem('user');
        if (storedUser) {
            setUser(JSON.parse(storedUser));
        }
        setLoading(false);
    }, []);

    const login = async (email, password) => {
        try {
            const { data } = await axios.post('http://localhost:5000/api/auth/login', {
                email,
                password
            });
            
            const userData = {
                token: data.token,
                name: data.name,
                email: data.email,
                credits: data.credits
            };
            
            setUser(userData);
            localStorage.setItem('user', JSON.stringify(userData));
            return { success: true };
        } catch (error) {
            return {
                success: false,
                error: error.response?.data?.message || 'Login failed'
            };
        }
    };

    const register = async (name, email, password) => {
        try {
            const { data } = await axios.post('http://localhost:5000/api/auth/register', {
                name,
                email,
                password
            });
            
            const userData = {
                token: data.token,
                name: data.name,
                email: data.email,
                credits: data.credits
            };
            
            setUser(userData);
            localStorage.setItem('user', JSON.stringify(userData));
            return { success: true };
        } catch (error) {
            return {
                success: false,
                error: error.response?.data?.message || 'Registration failed'
            };
        }
    };

    const logout = () => {
        setUser(null);
        localStorage.removeItem('user');
    };

    const updateUserCredits = (newCredits) => {
        if (user) {
            const updatedUser = { ...user, credits: newCredits };
            setUser(updatedUser);
            localStorage.setItem('user', JSON.stringify(updatedUser));
        }
    };            fetchPastListings();

        }

    }, [user?.token]);



    const handleFileChange = (e) => {

        const selectedFile = e.target.files[0];

        setFile(selectedFile);

        if (selectedFile) {

            setPreview(URL.createObjectURL(selectedFile));

        } else {

            setPreview(null);

        }

    };



    const handleSubmit = async (e) => {

        e.preventDefault();

        if (!file) {

            setError('Please select an image.');

            return;

        }

        setLoading(true);

        setError('');

        setGeneratedListing(null);



        const formData = new FormData();

        formData.append('productImage', file);



        try {

            const token = user.token;

            const { data } = await axios.post('http://localhost:5000/api/products/generate', formData, {

                headers: {

                    'Content-Type': 'multipart/form-data',

                    Authorization: `Bearer ${token}`

                }

            });

            setGeneratedListing(data.product);

            setPastListings([data.product, ...pastListings]);

            updateUserCredits(data.remainingCredits);

        } catch (err) {

            setError(err.response?.data?.message || 'An error occurred.');

        } finally {

            setLoading(false);

        }

    };

   

    const handleBuyCredits = async (packId) => {

        if (!user || !user.token) {

            alert('Please log in to purchase credits');

            return;

        }



        try {

            const token = user.token;

            console.log('Creating order for pack:', packId);

           

            const response = await axios.post('http://localhost:5000/api/billing/create-order',

                { packId },

                {

                    headers: {

                        Authorization: `Bearer ${token}`,

                        'Content-Type': 'application/json'

                    }

                }

            );

           

            console.log('Server response:', response.data);

           

            if (response.data.error) {

                throw new Error(response.data.error);

            }



            if (!response.data || !response.data.id) {

                throw new Error('Invalid order response from server');

            }



            const order = response.data;



            const options = {

                key: order.key_id,

                amount: order.amount,

                currency: order.currency,

                name: "MarketMind",

                description: "Credits Purchase",

                order_id: order.id,

                handler: async function (response) {

                    try {

                        const { data: verificationData } = await axios.post('http://localhost:5000/api/billing/verify-payment', {

                            razorpay_payment_id: response.razorpay_payment_id,

                            razorpay_order_id: response.razorpay_order_id,

                            razorpay_signature: response.razorpay_signature,

                            packId,

                            order_id: order.id

                        }, {

                            headers: { Authorization: `Bearer ${token}` }

                        });



                        if (verificationData.success) {

                            alert("Payment successful! Credits added.");

                            updateUserCredits(verificationData.newCredits);

                        } else {

                            alert(verificationData.message || "Payment verification failed. Please contact support.");

                        }

                    } catch (error) {

                        console.error("Payment verification failed:", error);

                        alert(error.response?.data?.message || "Payment verification failed. Please contact support.");

                    }

                },

                prefill: {

                    name: user.name,

                    email: user.email,

                },

                theme: {

                    color: "#3399cc"

                }

            };

            const rzp1 = new window.Razorpay(options);

            rzp1.open();

        } catch (error) {

            console.error("Payment failed", error);

           

            // Log the full error response

            console.log('Full error response:', {

                status: error.response?.status,

                statusText: error.response?.statusText,

                data: error.response?.data,

                message: error.message,

                details: error.response?.data?.details || 'No additional details'

            });



            // Extract the most relevant error message

            const errorMessage =

                error.response?.data?.error ||

                error.response?.data?.message ||

                error.message ||

                "Could not initiate payment.";

           

            alert(`Payment Error: ${errorMessage}`);

           

            if (error.response?.data?.details) {

                console.error('Detailed error:', error.response.data.details);

            }

        }

    };



    return (

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">

            {/* Left Column: Generator */}

            <div className="lg:col-span-1 bg-white p-6 rounded-xl shadow-lg">

                <h2 className="text-2xl font-bold mb-4">Generate New Listing</h2>

                <form onSubmit={handleSubmit} className="space-y-4">

                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">

                        <input type="file" id="file-upload" className="hidden" onChange={handleFileChange} accept="image/*" />

                        <label htmlFor="file-upload" className="cursor-pointer text-blue-500 font-semibold">

                            <i className="fas fa-cloud-upload-alt mr-2"></i>

                            {file ? file.name : 'Choose an image'}

                        </label>

                        {preview && <img src={preview} alt="Preview" className="mt-4 mx-auto h-32 rounded-lg" />}

                    </div>

                    <button type="submit" disabled={loading || !file} className="w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-3 rounded-lg font-bold hover:from-blue-600 hover:to-indigo-700 transition disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center">

                        {loading ? <span className="spinner"></span> : 'Generate Listing'}

                    </button>

                    {error && <p className="text-red-500 text-sm text-center">{error}</p>}

                </form>

               

                {/* Buy Credits Section */}

                <div className="mt-8 pt-6 border-t">

                    <h3 className="text-xl font-bold mb-4">Buy More Credits</h3>

                    <div className="space-y-3">

                         <button onClick={() => handleBuyCredits('50')} className="w-full bg-green-500 text-white py-2 rounded-lg hover:bg-green-600 transition">Buy 50 Credits (₹499)</button>

                         <button onClick={() => handleBuyCredits('150')} className="w-full bg-green-500 text-white py-2 rounded-lg hover:bg-green-600 transition">Buy 150 Credits (₹1199)</button>

                    </div>

                </div>

            </div>



            {/* Right Column: Results */}

            <div className="lg:col-span-2">

                {generatedListing && (

                    <div className="bg-white p-6 rounded-xl shadow-lg mb-8 animate-fade-in">

                        <h3 className="text-2xl font-bold text-gray-800">{generatedListing.title}</h3>

                        <p className="text-lg font-semibold text-green-600 mt-1">Suggested Price: ₹{generatedListing.suggestedPrice}</p>

                        <p className="text-gray-600 my-4">{generatedListing.description}</p>

                        <ul className="space-y-2 list-disc list-inside">

                            {generatedListing.bulletPoints.map((point, i) => <li key={i} className="text-gray-700">{point}</li>)}

                        </ul>

                    </div>

                )}

               

                <h2 className="text-2xl font-bold mb-4">Your Past Listings</h2>

                <div className="space-y-4">

                    {pastListings.length > 0 ? (

                        pastListings.map(item => (

                            <div key={item._id} className="bg-white p-4 rounded-xl shadow-md hover:shadow-lg transition-shadow">

                                <h4 className="font-bold text-gray-800">{item.title}</h4>

                                <p className="text-sm text-gray-500">{item.imageQuery}</p>

                            </div>

                        ))

                    ) : (

                        <p className="text-gray-500">You haven't generated any listings yet.</p>

                    )}

                </div>

            </div>

        </div>

    );

};



export default DashboardPage;



// import React, { createContext, useState, useEffect, useContext } from 'react';
// import axios from 'axios';

// const AuthContext = createContext();

// export const useAuth = () => {
//     return useContext(AuthContext);
// };

// export const AuthProvider = ({ children }) => {
//     const [user, setUser] = useState(null);
//     const [loading, setLoading] = useState(true);

//     useEffect(() => {
//         const userInfo = JSON.parse(localStorage.getItem('userInfo'));
//         if (userInfo) {
//             axios.defaults.headers.common['Authorization'] = `Bearer ${userInfo.token}`;
//             setUser(userInfo);
//         }
//         setLoading(false);
//     }, []);

//     const login = (userData) => {
//         localStorage.setItem('userInfo', JSON.stringify(userData));
//         axios.defaults.headers.common['Authorization'] = `Bearer ${userData.token}`;
//         setUser(userData);
//     };

//     const logout = () => {
//         localStorage.removeItem('userInfo');
//         delete axios.defaults.headers.common['Authorization'];
//         setUser(null);
//     };
    
//     const updateUserCredits = (newCredits) => {
//         if (user) {
//             const updatedUser = { ...user, credits: newCredits };
//             setUser(updatedUser);
//             localStorage.setItem('userInfo', JSON.stringify(updatedUser));
//         }
//     }

//     const value = {
//         user,
//         login,
//         logout,
//         isAuthenticated: !!user,
//         updateUserCredits,
//     };

//     return (
//         <AuthContext.Provider value={value}>
//             {!loading && children}
//         </AuthContext.Provider>
//     );
// };
